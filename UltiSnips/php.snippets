snippet php "Open PHP tag quickly" !b
<?php

$0
endsnippet

snippet de "Debug ZF2" !
\Zend\Debug\Debug::dump($1);$0
endsnippet

snippet dex "Debug ZF2 & exit" !
\Zend\Debug\Debug::dump($0);exit;
endsnippet

snippet de1 "Debug ZF1" !
Zend_Debug::dump($1);$0
endsnippet

snippet dex1 "Debug ZF1 & exit" !
Zend_Debug::dump($0);exit;
endsnippet

snippet getservice "Get Service Manager" !
$this->getService('$1')->$0
endsnippet

snippet getmodel "Get Service Manager" !
$this->getModel()->$0
endsnippet

snippet getmodelof "Get Service Manager" !
$this->getModelOf('$1')->$0
endsnippet

snippet fun "Create new function" !b
${1:public} function $2($3) {
	$0
}
endsnippet

snippet classcontroller "Controller Idvive" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '^.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 * @see         Idvive\Mvc\Controller\AbstractActionController
 */
namespace $2;

use Idvive\Mvc\Controller\AbstractActionController;

class $1 extends AbstractActionController {

    public function ${3:index}Action() {
		$0

        return $this->sendResponse();
    }

}
endsnippet

snippet newaction "Créer une nouvelle action pour un controller" !b
public function $1Action() {
	$0

	return $this->sendResponse();
}
endsnippet

snippet classform "Form Idvive" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '^.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 * @see         Idvive\Form\Form
 */
namespace $2;

use Idvive\Form\Form;

class $1 extends Form {

	public function init() {
		$this->add(array(
			'type' => '$0',
			'options' => array(
				'use_as_base_fieldset' => true
			)
		));

		parent::init();
	}

}
endsnippet

snippet classabstractfieldset "Abstract Fieldset Idvive" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '^.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 * @see         Idvive\Form\Fieldset
 */
namespace $2;

use Idvive\Form\Fieldset;

abstract class $1 extends Fieldset {

	public function __construct($name = '$3') {
		parent::__construct($name);
	}

	public function init() {
		$this->setObject($this->getServiceManager()->get('$4_entity'));
	}$0

}
endsnippet

snippet newfunctionfield "Field in Fieldset" !b
protected function add$1(${9:$required = ${10:true}}) {
	$this->add(array(
		'name' => '$2',
		'type' => '$3',
		'options' => array(
			$4
		),$5
	));

	$this->addFilter('$2', array(
		'required' => $required,
		'filters' => array(
			$7
		),$8
	));

	return $this;
}$0
endsnippet

snippet classfieldset "Fieldset Idvive" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '^.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 * @see         Idvive\Form\Fieldset
 */
namespace $2;

use Idvive\Form\Fieldset;

class $1 extends Fieldset {

	public function __construct($name = '$3') {
		parent::__construct($name);
	}

	public function init() {
		$this->setObject($this->getServiceManager()->get('$4_entity'));
		parent::init();

		$0
	}

}
endsnippet

snippet classfieldsetextends "Fieldset Extends Idvive" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '^.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 */
namespace $2;

class $1 extends Abstract$3 {

	public function init() {
		parent::init();

		$0
	}

}
endsnippet

snippet addfield "Add a Field to Fieldset" !b
$this->add(array(
	'name' => '$1',
	'type' => '$2',
	'options' => array(
		$3
	),$4
));

$this->addFilter('$1', array(
	'required' => ${5:true},
	'filters' => array(
		$6,
	),$0
));
endsnippet

snippet classentity "Entity Idvive" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 * @see         Idvive\Orm\Entity\AbstractEntity
 */
namespace $2;

use Idvive\Orm\Entity\AbstractEntity;

class $1 extends AbstractEntity {

	protected $_id$3;$0

	public function getId() {
		return $this->getId$3();
	}

	public function setId($id) {
		return $this->setId$3($id);
	}

	public function getId$3() {
		return $this->_id$3;
	}

	public function setId$3($id) {
		$this->_id$3 = $id;
		return $this;
	}

}
endsnippet

snippet classfactory "Factory Class Zend" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 */
namespace $2;

use Zend\ServiceManager\FactoryInterface;
use Zend\ServiceManager\ServiceLocatorInterface;

class $1 implements FactoryInterface {

	public function createService(ServiceLocatorInterface $sl) {
		$0
	}

}
endsnippet

snippet classmodel "Model Class Idvive" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 * @see			Idvive\Orm\Model\AbstractModel
 */
namespace $2;

use Idvive\Orm\Model\AbstractModel;

class $1 extends AbstractModel {

	$0

}
endsnippet

snippet classmappermysql "Mapper mysql Idvive" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 * @see         Idvive\Orm\Mapper\Db\AbstractDb
 */
namespace $2;

use Idvive\Orm\Mapper\Db\AbstractDb;

class $1 extends AbstractDb {

    /**
     * Le nom de la table
     * 
     * @var string
     */
    protected $_tableName = ${3:array('$4' => '$4${5:s}')};

    /**
     * La liste des champs de la table
     *
     * @var array
     */
    protected $_fields = array(
        'id_${6:$4}',$7
    );

    /**
     * Le champ primaire de la table
     *
     * @var string
     */
    protected $_idField = ${8:'id_$6'};${9:

	/**
	 * Liste des clés étrangères
	 *
	 * @var array
	 */
	protected $_foreignKey = array(
		$10
    );}${11:

	/**
	 * Liste des relations 
	 *
	 * @var array
	 */
	protected $_relations = array(
		$12
    );}${13:

	/**
	 * Liste des filtres à appliquer
	 *
	 * @var array
	 */
    protected $_filterData = array(
        '$14' => array(
            'name' => 'Idvive\Filter\DateTime',
            'format' => 'Y-m-d H:i:s',
        ),
    );}

	$0

}
endsnippet

snippet classservice "Service Idvive" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 * @see         Idvive\Orm\Service\AbstractService
 */
namespace $2;

use Idvive\Orm\Service\AbstractService;

class $1 extends AbstractService {

	$0

}
endsnippet

snippet addmodulealias "Add module alias" !b
${1:'$2_entity' => '$3\\${4:Entity}\\$5',
}${6:'$2_model' => '$3\\${7:Model}\\${8:$5}',
}${9:'$2_mapper' => '$3\\${10:Mapper}\\${11:$5MySQL}',
}${12:'$2_service' => '$3\\${13:Service}\\${14:$5}',
}$0
endsnippet

snippet addmoduledef "Add module definition" !b
${1:'$2_model' => array(
	'parameters' => array(
		${3:'entity' => '$2_entity',
		}${4:'mapper' => '$2_mapper',}
	),
),
}${5:'$2_service' => array(
	'parameters' => array(
		'model' => '$2_model',
	),
),
}${6:'$2_entity' => array(
	'shared' => false,
),
}$0
endsnippet

snippet zendsql "Permet d'effectuer des requêtes SQL avec zend" !b
$sql = $this->getSql();
$select = $sql->select();

$0

$statement = $sql->prepareStatementForSqlObject($select);
return $this->getResults($statement->execute());
endsnippet

snippet classphp "Classe PHP" !b
<?php
/**
 * ${1:`!v expand("%:t:r")`}
 *
 * @package     ${2:`!v substitute(substitute(expand("%:h"), '.*src\/\(.*\)$', '\1', ''), '\/', '\\', 'g')`}
 * @copyright   Copyright (c) `date +%Y` - IDVIVE SARL (http://www.idvive.com)
 * @license     http://license.idvive.com
 * @author      Yannick Dalbin <yannick@idvive.com>
 * @version     $Id `!v expand("%:t")` `date +%Y-%m-%d`$
 */
namespace $2;
${3:
use $4;}

class $1${5: extends $6} {

	$0

}
endsnippet
